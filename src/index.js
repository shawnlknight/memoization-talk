/*
# Step 1:
*/

const squareNum = (num) => num * num

const start = new Date()
const result1 = squareNum(40000)
console.log('result 1:', result1)
console.log('process time:', new Date() - start)

const start2 = new Date()
const result2 = squareNum(40000)
console.log('result 2:', result2)
console.log('process time:', new Date() - start2)

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

/*
# Step 2:
*/

// const inefficientSquare = (num) => {
//   let total = 0
//   for (let i = 0; i < num; i++) {
//     for (let j = 0; j < num; j++) {
//       total++
//     }
//   }
//   return total
// }

// const start = new Date()
// const result1 = inefficientSquare(40000)
// console.log('result 1:', result1)
// console.log('process time:', new Date() - start)

// const start2 = new Date()
// const result2 = inefficientSquare(40000)
// console.log('result 2:', result2)
// console.log('process time:', new Date() - start2)

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

/*
# Step 3:

Let's create our own memoize function!

*/

// const memoize = (func) => {
//   // Create cache for results
//   const results = {}

//   return (...args) => {
//     console.log('args', args)
//     console.log('results', results)
//     // Create a key for our cache
//     const argsKey = JSON.stringify(args)
//     // Only execute func if no cache val
//     if (!results[argsKey]) {
//       results[argsKey] = func(...args)
//     }
//     return results[argsKey]
//   }
// }

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

/*
# Step 4:
*/

// const sum = (a, b) => {
//   console.log('adding numbers')
//   return a + b
// }
// const memoizedSum = memoize(sum)

// const addResult1 = memoizedSum(1, 2)
// console.log('addResult1', addResult1)
// const addResult2 = memoizedSum(2, 1)
// console.log('addResult2', addResult2)

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

/*
# Step 5:

What if we wanted to memoize a function that takes in a function as an argument?
*/

// const sum = (a, b) => {
//   console.log('adding numbers')
//   return a + b
// }

// const functionArgument = memoize((fn, num1, num2) => fn(num1, num2))

// const addResult = functionArgument(sum, 2, 2)
// console.log('addResult', addResult)
// const addResult2 = functionArgument(sum, 2, 2)
// console.log('addResult2', addResult2)

// const subtract = (a, b) => {
//   return a - b
// }
// const subtractResult = functionArgument(subtract, 2, 2)
// console.log('subtractResult', subtractResult)

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

/*
# Step 6:
*/

// let c = 1
// const sideEffectAdd = (a, b) => {
//   console.log('sideEffectAdd')
//   return a + b + c
// }
// const memAdd = memoize(sideEffectAdd)
// console.log(memAdd(1, 2))
// console.log(memAdd(1, 2))
// c++
// console.log('c', c)
// console.log(memAdd(1, 2))

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

// Lets fix this!
// let c = 0
// const sideEffectAdd = (a, b, c) => {
//   console.log('sideEffectAdd')
//   return a + b + c
// }

// const memAdd = memoize(sideEffectAdd)
// console.log(memAdd(1, 2, c))
// console.log(memAdd(1, 2, c))
// c++
// console.log('c: ', c)
// console.log(memAdd(1, 2, c))
// console.log(memAdd(1, 2, c))
